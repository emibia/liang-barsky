(function (exports) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

/*
 * @CreateTime: Mar 5, 2017 8:03 PM 
 * @Author: Emidio Bianco 
 * @Contact: emidiobia@gmail.com 
 * @Last Modified By: undefined
 * @Last Modified Time: Mar 6, 2017 12:00 AM
 * @Description: Class representing the point in a 2D plane 
 */

function Point() {
  this.x = this.y = 0;

  switch (arguments.length) {
    case 0:
      break;
    case 1:
      if (_typeof(arguments[0]) == 'object') {
        if (Array.isArray(arguments[0])) {
          this.x = arguments[0][0];
          this.y = arguments[0][1];
        }
        // TODO: should it clone the Point or use the instance ???? 
        else if (arguments[0] instanceof Point) {
            this.x = arguments[0].x;
            this.y = arguments[0].y;
          }
      } else {
        this.x = this.y = arguments[0];
      }
      break;
    case 2:
      this.x = arguments[0];
      this.y = arguments[1];
  }
}

Point.prototype = {

  setX: function setX(x) {
    this.x = x;
  },
  setY: function setY(y) {
    this.y = y;
  },

  set: function set$$1(x, y) {
    this.setX(x);
    this.setY(y);
  },

  clone: function clone() {
    return new Point(this.x, this.y);
  }
};

// import * as glpk from './glpk.min.js';
// import * as jszip from 'jszip';

// import * as lalolib from './lalolib';

function LiangBarsky(startX, startY, endX, endY, width, height, rectX, rectY) {

  this.pStart = new Point(startX, startY), this.pEnd = new Point(endX, endY);

  this.xMin = rectX, this.yMin = rectY;
  this.xMax = width, this.yMax = height;
}

LiangBarsky.prototype = {
  compute: function compute() {

    var deltaX = this.pEnd.x - this.pStart.x,
        deltaY = this.pEnd.y - this.pStart.y;

    var pLeft = -deltaX,
        qLeft = this.pStart.x - this.xMin,
        pRight = deltaX,
        qRight = this.xMax - this.pStart.x,
        pBottom = -deltaY,
        qBottom = this.pStart.y - this.yMin,
        pTop = deltaY,
        qTop = this.yMax - this.pStart.y;
    // pTop = -deltaY, qTop = this.pStart.y - this.yMin,
    // pBottom    = deltaY,  qBottom    = this.yMax - this.pStart.y;

    var uLeft = qLeft / pLeft,
        uRight = qRight / pRight,
        uBottom = qBottom / pBottom,
        uTop = qTop / pTop;

    var p = new Array(),
        q = new Array();
    p.push(pLeft);p.push(pRight);p.push(pBottom);p.push(pTop);
    q.push(qLeft);q.push(qRight);q.push(qBottom);q.push(qTop);

    var x1 = this.pStart.x,
        y1 = this.pStart.y,
        x2 = this.pEnd.x,
        y2 = this.pEnd.y;

    for (var i = 0; i < 4; i++) {
      if (p[i] == 0) {
        console.debug("line is parallel to one of the clipping boundary");
        // if q[i] >= 0 the line is inside the clipping boundary
        if (q[i] >= 0) {
          // vertical
          if (i < 2) {
            if (y1 < this.yMin) {
              y1 = this.yMin;
            }

            if (y2 > this.yMax) {
              y2 = this.yMax;
            }

            console.log('line( ' + this.pStart.x + ',' + y1 + ',' + this.pEnd.x + ',' + y2 + ')');
            if (this.pStart.x < this.xMin || this.xMax < this.pEnd.x) return -1;else return [this.pStart.x, y1, this.pEnd.x, y2];
          }
          //horizontal
          if (i > 1) {
            if (x1 < this.xMin) {
              x1 = this.xMin;
            }

            if (x2 > this.xMax) {
              x2 = this.xMax;
            }
            console.log('line( ' + x1 + ',' + this.pStart.y + ',' + x2 + ',' + this.pEnd.y + ')');
            if (this.pStart.y < this.yMin || this.yMax < this.pEnd.y) return -1;else return [x1, this.pStart.y, x2, this.pEnd.y];
          }
        }
      }
    }

    var t1 = 0;
    var t2 = 1;

    for (var i = 0; i < 4; i++) {
      var temp = q[i] / p[i];
      console.log(temp);
      if (p[i] < 0) {
        if (t1 <= temp) t1 = temp;
      } else {
        if (t2 > temp) t2 = temp;
      }
    }

    //TODO: review
    if (t1 < t2) {
      var xx1 = x1 + t1 * p[1];
      var xx2 = x1 + t2 * p[1];
      var yy1 = y1 + t1 * p[3];
      var yy2 = y1 + t2 * p[3];
      console.log('line( ' + xx1 + ',' + yy1 + ',' + xx2 + ',' + yy2 + ')');
      return [xx1, yy1, xx2, yy2];
    }
  }

};

exports.LiangBarsky = LiangBarsky;

}((this.window = this.window || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
